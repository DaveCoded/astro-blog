---
import PageLayout from '@layouts/page-layout.astro';
import { CollectionEntry, getCollection } from 'astro:content';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
    const postEntries = await getCollection('posts');
    return postEntries.map(entry => ({
        params: { slug: entry.slug },
        props: { entry }
    }));
}

interface Props {
    entry: CollectionEntry<'posts'>;
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { title, date } = entry.data;
const { Content } = await entry.render();
---

<PageLayout title={title}>
    <main>
        <header>
            <h1>{title}</h1>
            <p class="date">{date.toLocaleDateString()}</p>
        </header>
        <div class="blog-post-content">
            <Content />
        </div>
    </main>
</PageLayout>

<style>
    header {
        text-align: center;
        padding: var(--space-2xl) var(--gap);
    }

    h1 {
        font-family: 'JostVariable';
        font-size: var(--step-4);
        font-weight: 780;
        margin: 0 auto var(--space-s);
        max-width: 900px;
        text-transform: uppercase;
        letter-spacing: 2px;
    }

    .date {
        font-family: 'JostVariable';
        font-size: var(--step--1);
        font-weight: 250;
    }

    .blog-post-content {
        display: grid;
        grid-template-columns: var(--grid-columns-definition);
    }

    .blog-post-content > :global(*) {
        grid-column: content;
    }

    .blog-post-content :global(.popout-layout) {
        grid-column: popout;
    }

    .blog-post-content :global(.feature-layout) {
        grid-column: feature;
    }

    .blog-post-content :global(.fullbleed-layout) {
        grid-column: full;
    }

    /* todo: this is a crap way of styling things in you MDX content. Use component replacement */
    .blog-post-content :global(p),
    .blog-post-content :global(ul),
    .blog-post-content :global(ol) {
        font-size: var(--step-0);
        line-height: 1.5;
        margin-bottom: var(--space-s);
        font-weight: 350;
    }

    .blog-post-content :global(h2) {
        font-size: var(--step-3);
        font-weight: 560;
        margin: var(--space-l) 0 var(--space-m);
    }

    .blog-post-content :global(h2):has(+ h3) {
        margin-bottom: 0;
    }

    .blog-post-content :global(h3) {
        font-family: 'JostVariable', sans-serif;
        font-size: var(--step-1);
        font-weight: 480;
        margin: var(--space-m) 0 var(--space-xs);
    }

    .blog-post-content :global(h4) {
        font-size: var(--step-1);
        margin-bottom: var(--space-s);
    }
</style>
